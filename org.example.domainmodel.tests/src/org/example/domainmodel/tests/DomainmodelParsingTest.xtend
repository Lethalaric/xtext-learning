/*
 * generated by Xtext 2.31.0
 */
package org.example.domainmodel.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.example.domainmodel.domainmodel.Domainmodel
import static org.junit.jupiter.api.Assertions.*
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.example.domainmodel.domainmodel.Entity
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.example.domainmodel.domainmodel.DomainmodelPackage
import org.example.domainmodel.validation.DomainmodelValidator

@ExtendWith(InjectionExtension)
@InjectWith(DomainmodelInjectorProvider)
class DomainmodelParsingTest {
	@Inject
	ParseHelper<Domainmodel> parseHelper
	
	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			Hello Xtext!
		''')
		assertNotNull(result)
		val errors = result.eResource.errors
		assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void parseDomailModel() {
		val model = parseHelper.parse('''
			entity MyEntity {
				parent: MyEntity
			}
		''')
		
		val entity = model.elements.head as Entity
		assertSame(entity, entity.features.head.type)
	}
 
	 @Inject ValidationTestHelper validationTestHelper
	 
	 @Test
	 def testValidModel() {
	     val entity = parseHelper.parse('''
	         entity MyEntity {
	             parent: MyEntity
	         }
		''')
	     validationTestHelper.assertNoIssues(entity)
	 } 
	 
	 @Test
	 def testNameStartsWithCapitalWarning() {
	     val entity = parseHelper.parse('''
	         entity myEntity {
	             parent: myEntity
	         }
		''')
	     validationTestHelper.assertWarning(entity,
	         DomainmodelPackage.Literals.TYPE,
	         DomainmodelValidator.INVALID_NAME,
	         "Name should start with a capital"
	     )
	 }
}
